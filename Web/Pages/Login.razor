@page "/login"
@using Web.Auth;
@inject IUserService UserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authenStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <laber>Login</laber>
            <input @bind="model.Email" type="email" class="form-control" placeholder="Login"/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = await UserService.Login(model.Email, model.Password);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid Colyaska");
            return;
        }

        var custonAuthStateProvider = (CustomAuthenticationStateProvider)authenStateProvider;

        await custonAuthStateProvider.UpdateAuthenticationStateAsync(new UserSession
            {
                Id = userAccount.IdPokupatel.ToString(),
                Email = userAccount.Email,
                UserName = userAccount.Fio,
                Role = "User"
            });
    navManager.NavigateTo("/", true);
    }


    //private async Task Authorization()
    //{
    //    var userAccount = await UserService.Login(model.Email, model.Password);
    //    if (userAccount == null)
    //    {
    //        await js.InvokeVoidAsync("alert", "Invalid Colyaska");
    //        return;
    //    }

    //    var custonAuthStateProvider = (CustomAuthenticationStateProvider)authenStateProvider;

    //    await custonAuthStateProvider.UpdateAuthorizationStateAsync(new UserLocal
    //        {
    //            Id = userAccount.IdPokupatel.ToString(),
    //            Email = userAccount.Email,
    //            FIO = userAccount.Fio,
    //            Phone = userAccount.Phone,
    //            Password = userAccount.Password,
    //            Role = "User"

    //        });
    //    navManager.NavigateTo("/", true);
    //}
}
